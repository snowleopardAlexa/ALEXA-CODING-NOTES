1. What is JSX?

A syntax extension of JavaScript created for the React JS framework. JSX is an XML/HTML-like syntax used by React that extends ECMAScript so that XML/HTML-like text can co-exist with JavaScript/React code. Unlike the past, instead of putting JavaScript into HTML, JSX allows us to put HTML into JavaScript.

2. How to navigate Javascript landscape? What technologies are related to JS?

- Vanilla JavaScript
- ES2015
- Babel
- React
- Vue.js
- ECMAScript
- CoffeeScript
- JSX
- TypeScript
- Angular
- ES6
- Node.js
- Gulp
- WebPack 

JS is constantly evolving. 

3. What is the Morten's incomplete guide to navigation the JS landscape?

- JavaScript: the core language; sometimes referred to as vanilla JS or VanillaJS
- ECMAScript: the browser specification of the JS language. It is not the language itself, but official description how the JS should behave. 
- ES6, ES2015, ES2017, Etc: refers to the use of features defined in ECMAScript, but not necessarly supported by modern browsers. --> Using ECMAScript usually means also using Babel.js to make it work in current browser implementations. 
- TypeScript: variation, dialect, or flavor of JS introducing features like strong typing. --> .ts
- React, Vue, Angular: JS frameworks allowsing us to write JS-based front-end applications.
--> introduce new coding conventions like JSX, and reliance on tools like Babel, WebPack, and Node.js.
- npm, WebPack, Gulp: build tools and infrastructure to automate the process of optimizing human-readable JS for the best browser perfromance.
- Node.js: JS server runtime used to run JS everywhere; used to run npm, WebPack, Babel, and more on your computer. 

4. What are the best tools from VSC to format and lint the code?

- Prettier helps automatically clean up your formatting
- ESLint helps automatically detect coding errors and can do basic cleanup automatically
- Both require Node.js

5. Why do you place JS at the beginning in the html document and why sometimes you put it at the end of the html document?

We place JS at the beginning of the html <script>...</script> in the head section, but in many cases, JS is also placed at the end. The code is read from the top to the bottom and once it encounters JS in the head, it will stop reading the code and it means that it will slow down rendering of the other elements. We place JS at the end of the html if it applies to the element that must be rendered before JS will work on it. 

6. What are the benefits of using external JS in the html? How to write the external JS in the head?

<script src="script.js></script>

BENEFITS:
- Separating HTML and JavaScript code will help manage the code base better
- Designers can work along with coders parallel without code conflicts
- Works well with modern source code version control systems such as GIT and SVN.
- Each of these files will maintain history
- Can be checked in, checked out by multiple programmers.
- Code as well as HTML is easily readable
- External JavaScript files are cached by browsers and can speed up page load times
With these small js files, you can use Google closure or YUI Compressor or other minifying tools to reduce the size and make it not readable by humans.
- Many popular JavaScript packages are available as hosted on content delivery networks (cdn) and you can simply point to them using the URL in the src, thus avoiding copying the js file to local folder.
- Take advantage of advanced tools such as CommonJS or RequireJS to load these scripts logically and modularly.

7. What are the cons of JS external?

- The browser has to make an extra http request to get the js code.
- Code can be downloaded using the url of the js file. This can help coders to steal your code easily.
- Dependency: If script1.js relies on script2.js and for some reason the script1.js download fails, then your application will break/crash, though the chances of this happening is very slim.
- Order of these includes must be maintained, otherwise you get into scope errors.
A small change to a common js file may cause unexpected results in some of the HTML files that use this js. Example, if you add document.load() in a common js since a certain HTML1 that uses this common js needs it, that may fix the issue in HTML1 but what about the other HTML files which also happen to include the same js?
- When many HTML pages are using a common js file, you need to be extra careful to change the common js. You will need to test all the HTML files that depend on this common js, every time you make a change to the js file.

8. What are the cons of JS external?

- The browser has to make an extra http request to get the js code.
- Code can be downloaded using the url of the js file. This can help coders to steal your code easily.
- Dependency: If script1.js relies on script2.js and for some reason the script1.js download fails, then your application will break/crash, though the chances of this happening is very slim.
- Order of these includes must be maintained, otherwise you get into scope errors.
A small change to a common js file may cause unexpected results in some of the HTML files that use this js. Example, if you add document.load() in a common js since a certain HTML1 that uses this common js needs it, that may fix the issue in HTML1 but what about the other HTML files which also happen to include the same js?
- When many HTML pages are using a common js file, you need to be extra careful to change the common js. You will need to test all the HTML files that depend on this common js, every time you make a change to the js file.

9. Is moving the script tag to the bottom of html a good practice?

No, it is not.  The traditional solution to this problem is to simply move, the script tag to the end of the document, so the browser only encounters it, when it's rendered everything else. This is not a solution though, this is a hack, and it introduces a whole range of other problems, there's a good chance you have JavaScript that should run at the beginning, or should happen, while the document is being loaded. And doing it this way, would mean you have to just split up the JavaScript depending on what it's doing, and then place some of it at the top, and some on the bottom. It's a really imprecise and hacky way of doing it, and it doesn't really work all that well. For this reason, we now have new tools in JavaScript to tightly control how, and when JavaScript is loaded.

10. What are the async and defer in JS and what is their role in loading JS in the browser?

<script src="js/script.js" async></script>

HTML PARSING --> JS download --> JS execution 
--> HTML parsing

The async keyword changes this behavior significantly. It tells the browser, 'Hey, when you encounter a JavaScript file, keep parsing the HTML while you download the JavaScript file, and only stop the parsing when you actually have the file, then execute whatever's in the JavaScript file, and then continue HTML parsing.' This dramatically shortens the time it takes for the browser to execute everything. And it doesn't, create this huge render blocking issue. There's still a hole in the rendering, but it's much shorter. This is good for some purposes, especially when you need, to get the JavaScript to parse as quickly as possible, and you don't really care about render blocking. But in our circumstance, we need to make sure the browser, only executes the JavaScript, after the document is complete. 

The defer keyword tells the browser, 'parse your HTML and if you encounter JavaScript, just load it alongside your HTML parsing. Then when the HTML parsing is complete, execute whatever JavaScript you have.' So this is exactly what we want for our purposes. That means, I can go back to my script, and then at the end of my script tag, just add defer, save the file, and in the browser, everything is now working properly, because we are literally deferring the execution, off the script until, everything else has been rendered. Here's your takeaway. 

Async and defer should be the standard way of loading JavaScript today. Only use render blocking, meaning ,either placing the script tag without the async and defer keywords, or placing the, script tag at the bottom of the document, if you have a specific reason to do so. And trust me, I've asked around and tried to figure it out myself, I have yet to find a use case, where it makes sense, to not use async and defer. Loading JavaScript in the footer, is now an anti pattern. 

From here on forward, JavaScript should always be loaded in the head, and then you use async or defer, to control when that JavaScript is executed on the document.

11. Do async/defer are the standard to use these days?

Only use render blocking when you have a specific reason. Loading JS in the footer is now an anti-pattern.

12. What are JS modules?

JavaScript modules allow us to break pieces out of a JavaScript file and place them in a separate file and then import them back into the original file again.

13. What are the objects in JS?

This backpack is an object. This object has many identifiable properties like color, size, et cetera. We can give all of these properties recognizable names and then use them to describe this individual backpack objects. This backpack has the color gray. That's a property. If we fill it all the way up, we'll discover its volume is 30 liters. Another property. It has a bunch of pockets, 15 I think, that's a property. It has seven straps as a property, et cetera, et cetera. Object properties define the specifics of this one particular object. That way, I can have several backpacks, and why they're all backpacks, each has its own set of properties which makes that backpack a unique object. Now, I said JavaScript is a prototype based object oriented programming language. That means, each object is a unique instance of an object prototype. I have a lot of backpacks. The reason I can say they're all backpacks is they share common properties which define them as belonging to the backpack category. They all have two straps on one side, I can put my arms through. The area behind those straps is flat so it fits comfortably against my back. And they all have an opening at the top. This properties describe the prototype of a backpack and the particular combination and configuration of these properties define each individual backpack. This object prototype makes it easy to identify an existing bag as a backpack. You can check to see if it has the properties that match the prototype, and makes it easy to create a new backpack. Simply describe it by filling the property values. This prototype based object orientation allows us to do in programming, what we as humans do every time we encounter a new object and catalog it in our minds. We look at it, note its properties and think, this thing has the same collection of properties as this other thing I already know. So even though it is a different thing in appearance, the similarities in properties means its the same object type. And there's more, objects can have features built into them allowing us to change their property values. This backpack has several such features. A lid that can be opened and closed, a zipper to open and close the left and right sides, Strap adjusters to change the strap length, et cetera. In JavaScript, these property changing features inside an object are called methods. Which makes sense if you think about it, there's a method for opening and closing the backpack, a method for lengthening the straps and so on. These methods act on the current object only. So if I open this backpack using its top access method nothing happens to this other backpack because it's an entirely separate object. Oh, and one final thing, objects can contain other objects. So inside this backpack object, there is another object, a headlamp. And because the headlamp object is inside the backpack object, it is quite literally a property of the backpack object for as long as it's in there. This headlamp has its own set of properties, color, size, battery status, et cetera, and has its own set of methods, I can turn the light on and off, I can adjust the strap, I can charge it and so on. The headlamp object like the backpack object is a unique and separate object. It can be included inside another object, or it can be separate. There can be one or many of them and changing one object does not change the others.

const backpack; <-- variable holds data
const backpack = {}; <-- curly brackets define data as an object

const backpack = {
  name: "Coma Backpack", <-- properties defined using key-value pairs.
  volume: 40,
  color: "grey",
  pocketNum: 15,
  strapLength: {
    left: 26,
    right: 26,
},
  lidOpen: false,
  toggleLid: function (lidStatus) <-- methods are properties containing functions.
   this.lidOpen = lidStatus;
  },
};

* this - refers to the current object.

14. What are the objects containers in JS?

const backpack = {
  name: "Coma Backpack",
  volume: 34,
  color: "red",
};

const <-- variable declaration: var, let, const
backpack <-- variable name: refers to the name; get the data contained within

Objects are typically Constants --> we can change the properties of the object inside the container. We can't remove or replace the object from the container.

15. What does it mean objects are typically constants in JS?

We can change the properties of the object inside the container. We can't remove or replace the object from the container.

16. Which keyword do you use to build an object using a constructor function?

new

17. What is the constant in JS?

ES6 provides a new way of declaring a constant by using the const keyword. The const keyword creates a read-only reference to a value. However, variables created by the const keyword are immutable. In other words, you can't reassign them to different values.

18. What are the object properties?

const backpack = {
name: "Coma", <--> properties
volume: 45,
color: "Red"
}

Properties of objects are separated by comma, and named with camelCase. Properties can be changed, added, and deleted, but some are read-only. All properties have a name and a value. The value is one of the properties attributes. In JS all attributes can be read, but only the value attribute can be changed, only if the property is writeable.

19. What is the example of nested objects in JS? Write the code. 

Values in an object can be another object.
You can access nested objects using the dot notation or the bracket notation:

myObj = {
  name: "Alexa",
  age: 34,
  cars: {
    car1: "Ford",
    car2: "BMW",
    car3: "Fiat"
  }
}

myObj.cars.car2;

20. What are nested arrays and objects? Write an example code.

const myObj = {
   name: "Alexa",
   age: 45,
   cars: [
        {name: "Ford", "models":["BMW", "Focus", "Mustang"]},
        {name: "BMW", "models":["320", "x3", "x5"]},
        {name: "Ferrari", "models":["546", "ak345", "Mu678"]},
  ]
}

21. How to access the objects in JS?

Anytime you want to access an object or anything else contained inside a variable you simply call it by its name and JavaScript will hand it to you. JavaScript has a series of console methods for this purpose. And the most common one is called console log. 

console.log(backpack);