1. What is CSS Transform?

Transform changes the shape and position of the affected content without disruptng the normal document flow by modifying the coordinate space. 

transform: translateX(300px) --> we move 300px object on the horizontal oxis, we move it 300px to the right. It refers to the container.

transform: translateX(100%) --> we move the same distance to the right what is the size of the object. % refers to the object, not to the container. 

transform: translate(100px, 200px); --> it moves to the right and down. We moved it on both oxis.

transform: translate(100px, 200px) scale(2) rotate(45deg); --> we move to the right and bottom, and then we doubled the size and rotate at the angle of 45 degrees. 


TRANSFORM WILL CHANGE HOW THE OBJECT APPEARS, BUT THEY WILL NOT CREATE AN ANIMATION.

THE ORDER IS IMPORTANT! THE ORDER OF TRANSFORM ACTION WILL AFFECT THE FINAL RESULT.

transform: rotate(46deg) scale(2) translate(100px, 200px); 


2. What is 3D transform?

With the CSS transform property you can use the following 3D transformation methods:

rotateX()
rotateY()
rotateZ()

The rotateX() method rotates an element around its X-axis at a given degree:

#myDiv {
  transform: rotateX(150deg);
}

The rotateY() method rotates an element around its Y-axis at a given degree:

#myDiv {
  transform: rotateY(150deg);
}

The rotateZ() method rotates an element around its Z-axis at a given degree:

#myDiv {
  transform: rotateZ(90deg);
}

3. What is perspective?

Perspective specifies on how 3D elements are viewed. 

4. What is CSS Transition?

Transition allows changes in a property to take place over time. 

5. What is CSS Keyframe animation?

Keyframe animation defines sequence of states within the @keyframes rule. 

Two Steps:
- define the animation keyframes in @keyframes rule
- assign the keyframes to an element

- 0% or "from" keyframe is the start of the animation
- 100% or "to" keyframe is the end of the animation

@keyframes scaleIn {
    0% {
        transform: scale(0.2);
    }
    85% {
        transform: scale(1.1);
    }
    100% {
        transform: scale(1);
    }
}

h2 {
    font-size: 5rem;
    text-align: center;
    color: red;
    text-shadow: rgb(224, 214, 214);
    animation-name: scaleIn; /* call it from keyframes */
    animation-duration: 2s;
}

scaleIn ---> don't forget to name randomly the animation!

6. What is animation delay?

Animation delay specifies the amount of time to wait before beginning to perform the animation. 

h2 {
    font-size: 5rem;
    text-align: center;
    color: red;
    text-shadow: rgb(224, 214, 214);
    animation-name: scaleIn; /* call it from keyframes */
    animation-duration: 2s;
    animation-delay: 2s;
}

7. What is animation-fill-mode?

Animation fill mode lets you control what happens during delays before an animatio starts actively playing, and/or what happens after an animation's duration has ended. 

h2 {
    font-size: 5rem;
    text-align: center;
    color: red;
    text-shadow: rgb(224, 214, 214);
    animation-name: scaleIn; /* call it from keyframes */
    animation-duration: 2s;
    animation-delay: 2s;
    animation-fill-mode: backwards;
}

8. What is animation direction?

Animation direction lets you control what order our keyframes are executed in. 

Values:
normal, reverse, alternate, alternate-reverse.

When you use alternate and alternate-reverse you need to have animation-iteration-count more than 1.

.lion {
    width: 100px;
    height: 100px;
    animation-name: move;
    animation-duration: 3s;
    animation-fill-mode:  forwards;
    animation-iteration-count: 3;
    animation-direction: alternate;
}

9. What is easing?

Easing is what describes the speed changes of your animation over the course of its duration.

10. What are the 3 options for animation-timing-functions?

- easing keywords
- the steps() function
- custom cubic-brezier curves

11. What are the keyword easing options in CSS?

- ease 
- ease-in-out
- ease-in 
- ease-out
- linear 

12. What is the steps() timing function?

Steps() function plays an animation back in a defined number of steps, pausing briefly at each, instead of smoothly interpolating between keyframes states.

h2 {
    font-size: 2rem;
    animation-name: typing;
    animation-duration: 3s;
    animation-timing-function: steps(5);
}

@keyframes typing {
    0% {
        width: 0px;
    }
    100% {
        width: 100%;
    }
}

@keyframes blinking {
    0%, 100% {
        border-color: transparent;
    }
    50% {
      border-color: red;
    }
}